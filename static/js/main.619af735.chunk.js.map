{"version":3,"sources":["components/TableItem/index.jsx","components/Equipment/index.jsx","components/Abilities/index.jsx","components/Attributes/indes.jsx","store/soldersArr.js","components/Solder/index.jsx","layouts/Solders/Solders.jsx","components/Commander/index.jsx","store/pointSlice.js","components/Settings/index.jsx","App.jsx","store/store.js","index.js"],"names":["TableItem","data","onChange","name","itemOptions","useState","position","setPosition","useEffect","className","e","target","value","id","map","item","index","points","attModifier","effect","React","memo","Equipment","setEquipment","Object","entries","Abilities","reduce","acc","length","Attributes","levelId","handleChange","unitsData","dataAtt","units","experience","stats","movement","attack","defence","morale","action","equipment","abilities","soldersSlice","createSlice","initialState","reducers","setSolder","state","payload","removeSolderId","filter","el","setSolderUnit","findIndex","unitId","unit","setSolderData","actions","Solder","remove","solData","soldersData","solders","quantity","setQuantity","setId","setLevelId","dispatch","useDispatch","unitData","setUnitData","eqipSum","values","sum","htmlFor","onClick","weaponType","weaponId","wtObj","Solders","counter","setCounter","startSolder","useSelector","addSolder","a","onRemove","Commander","console","log","pointSlice","startPoint","currentPoint","setStartPoints","Number","setCurPoints","Settings","currentPoints","point","type","placeholder","App","getStartPoints","getSolders","configureStore","reducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.619af735.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\n/*\r\n* data: Array ['name', Array]\r\n */\r\n\r\nconst TableItem = ({data, onChange}) => {\r\n  const name = data[0];\r\n  const itemOptions = data[1];\r\n  const [position, setPosition] = useState(0);\r\n\r\n\r\n  useEffect(() => {\r\n    onChange(name, position);\r\n  }, [position])\r\n\r\n\r\n\r\n  if (!itemOptions[position]) {\r\n    if (position !== 0) {\r\n      setPosition(0);\r\n    }\r\n    return <></>\r\n  };\r\n\r\n  return (\r\n    <div className=\"equip__table\">\r\n      <span className=\"att__cell\">{name}</span>\r\n      <div className=\"att__cell\">\r\n        <select onChange={(e) => setPosition(e.target.value)} className=\"att__select\" name=\"\" id=\"\">\r\n          {itemOptions.map((item, index) => (\r\n            <option key={index} value={index}>{item.name}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div  className=\"att__cell\">{itemOptions[position].points}</div>\r\n      <div  className=\"att__cell\">{itemOptions[position].attModifier}</div>\r\n      <div  className=\"att__cell\">{itemOptions[position].effect}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(TableItem);\r\n","import React, {useState} from 'react';\r\nimport './Equipment.css'\r\nimport TableItem from \"../TableItem\";\r\n\r\nconst Equipment = ({setEquipment, data}) => {\r\n  return (\r\n    <div>\r\n      <div className=\"equip__header\">Equipment</div>\r\n        <div className=\"equip__table\">\r\n          <div className=\"table__header\">Type</div>\r\n          <div className=\"table__header\">Name</div>\r\n          <div className=\"table__header\">Cost per warrior</div>\r\n          <div className=\"table__header\">Modifier</div>\r\n          <div className=\"table__header\">Effect</div>\r\n        </div>\r\n      {\r\n        Object.entries(data).map((item, index) => (\r\n          <TableItem key={index} data={item} onChange={setEquipment}/>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Equipment;\r\n","import React from 'react';\r\nimport './Abilities.css'\r\n\r\nconst Abilities = ({data}) => {\r\n  return (\r\n    <div>\r\n      <div className=\"abil__header\">Abilities</div>\r\n      <div className=\"abil__text\">\r\n        {data.reduce((acc, item, index) => {\r\n          if (data.length - 1 === index) {\r\n            return acc + item;\r\n          }\r\n          return acc + item + \", \";\r\n        }, \"\")}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Abilities;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './Attributes.css'\r\nimport Equipment from \"../Equipment\";\r\nimport Abilities from \"../Abilities\";\r\n\r\n\r\nconst Attributes = ({levelId, setEquipment, handleChange, dataAtt}) => {\r\n  const unitsData = dataAtt.units;\r\n\r\n  if (!unitsData[levelId]) {\r\n    if (levelId !== 0) {\r\n      handleChange(0);\r\n    }\r\n    return <></>\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"att__root\">\r\n        <div className=\"att__headCell\">Experience</div>\r\n        <div className=\"att__headCell\">Movement</div>\r\n        <div className=\"att__headCell\">Attack</div>\r\n        <div className=\"att__headCell\">Defence</div>\r\n        <div className=\"att__headCell\">Morale</div>\r\n        <div className=\"att__headCell\">Actions</div>\r\n        <div className=\"att__headCell\">Points</div>\r\n      </div>\r\n      <div className=\"att__root\">\r\n        <div className=\"att__cell\">\r\n          <select onChange={(e) => handleChange(e.target.value)} className=\"att__select\" name=\"\" id=\"\">\r\n            {unitsData.map((item, index) => (\r\n              <option key={index} value={index}>{item.experience}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[levelId].stats.movement}\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[levelId].stats.attack}+\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[levelId].stats.defence}+\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[levelId].stats.morale}+\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[levelId].stats.action}\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[levelId].stats.points}\r\n        </div>\r\n      </div>\r\n      <Equipment setEquipment={setEquipment} data={unitsData[levelId].equipment} />\r\n      <Abilities data={unitsData[levelId].abilities}/>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Attributes;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const soldersSlice = createSlice({\r\n  name: 'solders',\r\n  initialState: [],\r\n  reducers: {\r\n    setSolder: (state, action) =>\r\n      state = [...state, action.payload],\r\n    removeSolderId: (state, action) =>\r\n      state = state.filter((el) => el.id !== action.payload),\r\n    setSolderUnit: (state, action) => {\r\n      void(state[state.findIndex((el) => el.id === action.payload.unitId)].unit = action.payload.unit)},\r\n    setSolderData: (state, action) =>\r\n      void(state[action.payload.unitId].unit.data.equipment = action.payload.data),\r\n  }\r\n})\r\n\r\n\r\nexport const { setSolder, removeSolderId, setSolderUnit, setSolderData } = soldersSlice.actions\r\n\r\nexport default soldersSlice.reducer\r\n","import React, {useEffect, useState} from 'react';\r\nimport Attributes from \"../Attributes/indes\";\r\nimport soldersData from \"./solders.json\"\r\n\r\nimport \"./Solder.css\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setSolderUnit} from \"../../store/soldersArr\";\r\n\r\nconst Solder = ({unitId, remove}) => {\r\n  const solData = soldersData.solders;\r\n  const [quantity, setQuantity] = useState(3);\r\n  const [id, setId] = useState(0);\r\n  const [levelId, setLevelId] = useState(0);\r\n  const dispatch = useDispatch();\r\n  const [unitData, setUnitData] = useState({\r\n    id: solData[id].id,\r\n    name: solData[id].name,\r\n    quantity: quantity,\r\n    experience: solData[id].units[levelId].experience,\r\n    stats: solData[id].units[levelId].stats,\r\n    equipment: Object.entries(solData[id].units[levelId].equipment).reduce((acc, item,) => {\r\n      const name = item[0];\r\n      acc[name] = item[1][0];\r\n      return acc;\r\n    }, {}),\r\n    abilities: solData[id].units[levelId].abilities,\r\n  });\r\n\r\n  const checkSolder = (e) => {\r\n    setId(e.target.value);\r\n    setLevelId(0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setUnitData({...unitData, quantity})\r\n  }, [quantity]);\r\n\r\n  useEffect(() => {\r\n    const eqipSum = Object.values(unitData.equipment).reduce((acc, index) => {\r\n      acc += index.points\r\n      return acc\r\n    }, 0)\r\n    const sum = unitData.quantity * (solData[id].units[levelId].stats.points + eqipSum);\r\n\r\n    const unit = {...unitData};\r\n    unit.sum = sum;\r\n    dispatch(setSolderUnit({unit, unitId}));\r\n  }, [unitData])\r\n\r\n\r\n  const setEquipment = (weaponType, weaponId) => {\r\n    const wtObj = {}\r\n    wtObj[weaponType] = solData[id].units[levelId].equipment[weaponType][weaponId];\r\n    setUnitData({...unitData, equipment: {...unitData.equipment, ...wtObj}});\r\n  }\r\n\r\n  const changeLevel = (id) => {\r\n    setLevelId(id);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <select onChange={checkSolder} name=\"\" id=\"\" className=\"\">\r\n          {solData.map((data) => (\r\n            <option key={data.id} value={data.id}>{data.name}</option>\r\n          ))}\r\n        </select>\r\n        <label htmlFor=\"\"></label>\r\n        <button onClick={() => {setQuantity(quantity - 1)}}>-</button>\r\n        {quantity}\r\n        <button onClick={() => {setQuantity(quantity + 1)}}>+</button>\r\n        <button onClick={remove}>remove</button>\r\n      </div>\r\n      <Attributes levelId={levelId} setEquipment={setEquipment} handleChange={changeLevel} dataAtt={solData[id]}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Solder;\r\n","import React, { useState } from 'react';\r\nimport Solder from \"../../components/Solder\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setSolder, removeSolderId} from \"../../store/soldersArr\";\r\n\r\nconst Solders = () => {\r\n  const [counter, setCounter] = useState(0)\r\n\r\n  const startSolder = useSelector((state) => state.solders)\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const onRemove = (id) => {\r\n    dispatch(removeSolderId(id));\r\n  }\r\n\r\n  const addSolder = async function () {\r\n    await dispatch(setSolder({id: counter}))\r\n    await setCounter(counter + 1);\r\n  }\r\n\r\n  return (\r\n    <div className=\"solder__root\">\r\n      <div className=\"commander__header\">Solders</div>\r\n      {startSolder.map(({id}, index) => (\r\n        <Solder\r\n          key={id} unitId={id} remove={() => onRemove(id)}\r\n        />\r\n      ))}\r\n      <button className=\"soldersButton\" onClick={addSolder}>add solders group </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Solders;\r\n","import React from 'react';\r\nimport Attributes from \"../Attributes/indes\";\r\n\r\nimport './Commander.css'\r\n\r\nconst Commander = () => {\r\n\r\n  return (\r\n    <div className=\"commander__root\">\r\n      <div className=\"commander__header\">\r\n        commander\r\n      </div>\r\n      <div className=\"commander__wrap\">\r\n        <label htmlFor=\"comm_select\">Choose your commander: </label>\r\n        <select name=\"\" id=\"comm_select\" className=\"commander__choose\">\r\n          <option value=\"baron\">Baron</option>\r\n          <option onClick={() => {console.log(\"click on option\")}} value=\"baron-m\">Mounted baron</option>\r\n          <option value=\"lord\">Lord</option>\r\n          <option value=\"lord-m\">Mounted Lord</option>\r\n          <option value=\"vsergeant\">Veteran Sergeant</option>\r\n          <option value=\"vsergant-m\">Mounted Veteran Sergeant</option>\r\n        </select>\r\n      </div>\r\n      <button> add command group?</button>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Commander;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const pointSlice = createSlice({\r\n  name: 'point',\r\n  initialState: {\r\n    startPoint: 500,\r\n    currentPoint: 0\r\n  },\r\n  reducers: {\r\n    setStartPoints: (state, action) => {\r\n      state.startPoint = Number(action.payload);\r\n    },\r\n    setCurPoints: (state, action) => {\r\n      state.currentPoint = Number(action.payload);\r\n    }\r\n  }\r\n})\r\n\r\n\r\nexport const { setStartPoints, setCurPoints } = pointSlice.actions\r\n\r\nexport default pointSlice.reducer\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setStartPoints} from \"../../store/pointSlice\";\r\nimport './settings.css'\r\n\r\n\r\nconst Settings = () => {\r\n  const currentPoints = useSelector((state) => state.point.currentPoint);\r\n  const startPoint = useSelector((state) => state.point.startPoint)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <div className={\"commander__root header_sticky\"}>\r\n      <div className=\"commander__header\">Retinue settings</div>\r\n      <div className=\"retinueSett\">\r\n        <div>\r\n          <label htmlFor=\"ret_name\">Retinue name: </label>\r\n          <input id=\"ret_name\" type=\"text\" placeholder=\"Get name for you Retinue\"/>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"ret_points\">Points: </label>\r\n          <input type=\"number\" onChange={(e) =>{\r\n            dispatch(setStartPoints(e.target.value))\r\n          }} value={startPoint}/>\r\n        </div>\r\n\r\n        Points remain: {currentPoints}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React, {useEffect} from 'react'\nimport './App.css';\nimport Solders from \"./layouts/Solders/Solders\";\nimport Commander from \"./components/Commander\";\nimport Settings from \"./components/Settings\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setCurPoints} from \"./store/pointSlice\";\n\nfunction App() {\n  /*\n  const company = {\n    settings: {\n      name: '',\n      startPoints: 0,\n    },\n    commanders: [\n      {\n        name:\"\",\n        level: \"\",\n        stats: {\n          movement: 6,\n          attack: 4,\n          defence: 7,\n          morale: 4,\n          action: 1,\n          points: 19\n        },\n        equipment: {\n          weapon: {\n            name: \"crossbow\",\n            attModifier: [0, 1]\n          },\n          armour: {\n            name: \"mail\",\n            defModifier: 2\n          },\n          shield: {\n\n          },\n          options: [{\n            name: \"lance\",\n            isChecked: true\n          }]\n        },\n        abilities: [\"Every Bloody Sunday\"],\n        comgroup: {\n          name:\"\",\n          level: \"\",\n          stats: {\n            movement: 6,\n            attack: 4,\n            defence: 7,\n            morale: 4,\n            action: 1,\n            points: 19\n          },\n          equipment: {\n            weapon: {\n              name: \"crossbow\",\n              attModifier: [0, 1]\n            },\n            armour: {\n              name: \"mail\",\n              defModifier: 2\n            },\n            shield: {\n\n            },\n            options: [{\n              name: \"lance\",\n              isChecked: true\n            }]\n          },\n          abilities: [\"Every Bloody Sunday\"],\n        }\n      }\n    ],\n    solders: [\n      {\n        unit: {\n          name: \"sergeants\",\n          level: \"veteran\",\n          stats: {\n            movement: 6,\n            attack: 4,\n            defence: 7,\n            morale: 4,\n            action: 1,\n            points: 19\n          },\n          equipment: {\n            weapon: {\n              name: \"crossbow\",\n              attModifier: [0, 1]\n            },\n            armour: {\n              name: \"mail\",\n              defModifier: 2\n            },\n            shield: {\n\n            },\n            options: [{\n              name: \"lance\",\n              isChecked: true\n            }]\n          },\n          abilities: [\"Every Bloody Sunday\"]\n        }\n      }\n    ]\n  }\n  */\n\n  const getStartPoints = useSelector((state) => state.point.startPoint);\n  const getSolders = useSelector(state => state.solders)\n  const dispatch = useDispatch();\n\n  const calcPoints = () => {\n    const sum = getSolders.reduce((acc, item) => {\n      if (item.unit) {\n        acc += item.unit.sum;\n      }\n\n      return acc\n    }, 0);\n    dispatch(setCurPoints(getStartPoints - sum))\n  }\n\n  useEffect(calcPoints, [getSolders, getStartPoints, dispatch])\n\n  return (\n    <div className=\"App\">\n      <div className=\"App_wrap\">\n        <h1 className=\"Header\">Army roster</h1>\n\n        <Settings />\n        <Commander />\n        <button>add another commander?</button>\n        <div className=\"solders-wrap\">\n          <Solders />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport pointSlice from \"./pointSlice\";\r\nimport soldersSlice from \"./soldersArr\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    point: pointSlice,\r\n    solders: soldersSlice,\r\n\r\n  },\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport store from \"./store/store\";\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}