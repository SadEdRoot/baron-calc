{"version":3,"sources":["components/TableItem/index.jsx","components/Equipment/index.jsx","components/Abilities/index.jsx","store/soldersArr.js","components/Attributes/indes.jsx","components/Solder/index.jsx","layouts/Solders/Solders.jsx","components/Commander/index.jsx","store/pointSlice.js","components/Settings/index.jsx","App.jsx","store/store.js","index.js"],"names":["TableItem","data","itemOptions","useState","position","setPosition","className","onChange","e","target","value","name","id","map","item","index","points","attModifier","effect","Equipment","Object","entries","Abilities","reduce","acc","length","soldersSlice","createSlice","initialState","reducers","setSolder","state","action","payload","removeSolderId","filter","el","setSolderUnit","unitId","unit","actions","Attributes","dataAtt","quantity","unitsData","units","dispatch","useDispatch","useEffect","sumWeapon","sumAbilities","sum","stats","experience","movement","attack","defence","morale","equipment","abilities","Solder","remove","solData","soldersData","solders","setQuantity","setId","htmlFor","onClick","Solders","solder","setSolders","counter","setCounter","useSelector","onRemove","Commander","console","log","pointSlice","startPoint","currentPoint","setStartPoints","Number","setCurPoints","Settings","currentPoints","point","type","placeholder","App","getStartPoints","getSolders","configureStore","reducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.8b17ac1a.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\n/*\r\n* data: Array ['name', Array]\r\n */\r\n\r\nconst TableItem = ({data}) => {\r\n  const itemOptions = data[1];\r\n\r\n  const [position, setPosition] = useState(0);\r\n\r\n  if (!itemOptions[position]) {\r\n    if (position !== 0) {\r\n      setPosition(0);\r\n    }\r\n    return <></>\r\n  };\r\n  return (\r\n    <div className=\"equip__table\">\r\n      <span className=\"att__cell\">{data[0]}</span>\r\n      <div className=\"att__cell\">\r\n        <select onChange={(e) => {setPosition(e.target.value)}} className=\"att__select\" name=\"\" id=\"\">\r\n          {itemOptions.map((item, index) => (\r\n            <option key={index} value={index}>{item.name}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div  className=\"att__cell\">{itemOptions[position].points}</div>\r\n      <div  className=\"att__cell\">{itemOptions[position].attModifier}</div>\r\n      <div  className=\"att__cell\">{itemOptions[position].effect}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableItem;\r\n","import React from 'react';\r\nimport './Equipment.css'\r\nimport TableItem from \"../TableItem\";\r\n\r\nconst Equipment = ({data}) => {\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"equip__header\">Equipment</div>\r\n        <div className=\"equip__table\">\r\n          <div className=\"table__header\">Type</div>\r\n          <div className=\"table__header\">Name</div>\r\n          <div className=\"table__header\">Cost per warrior</div>\r\n          <div className=\"table__header\">Modifier</div>\r\n          <div className=\"table__header\">Effect</div>\r\n        </div>\r\n      {\r\n        Object.entries(data).map((item, index) => (\r\n          <TableItem key={index} data={item}/>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Equipment;\r\n","import React from 'react';\r\nimport './Abilities.css'\r\n\r\nconst Abilities = ({data}) => {\r\n  return (\r\n    <div>\r\n      <div className=\"abil__header\">Abilities</div>\r\n      <div className=\"abil__text\">\r\n        {data.reduce((acc, item, index) => {\r\n          if (data.length - 1 === index) {\r\n            return acc + item;\r\n          }\r\n          return acc + item + \", \";\r\n        }, \"\")}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Abilities;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const soldersSlice = createSlice({\r\n  name: 'solders',\r\n  initialState: [],\r\n  reducers: {\r\n    setSolder: (state, action) =>\r\n      state = [...state, action.payload],\r\n    removeSolderId: (state, action) =>\r\n      state = state.filter((el) => el.id !== action.payload),\r\n    setSolderUnit: (state, action) =>\r\n      void(state[action.payload.unitId].unit = action.payload.unit),\r\n  }\r\n})\r\n\r\n\r\nexport const { setSolder, removeSolderId, setSolderUnit } = soldersSlice.actions\r\n\r\nexport default soldersSlice.reducer\r\n","import React, {useEffect, useState} from 'react';\r\nimport './Attributes.css'\r\nimport Equipment from \"../Equipment\";\r\nimport Abilities from \"../Abilities\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setSolderUnit} from \"../../store/soldersArr\";\r\n\r\nconst Attributes = ({unitId, dataAtt, quantity = 1}) => {\r\n  const unitsData = dataAtt.units;\r\n  const dispatch = useDispatch();\r\n\r\n  const [position, setPosition] = useState(0);\r\n\r\n  useEffect(()=> {\r\n    if (unitsData[position]) {\r\n      const unit = {\r\n        name: dataAtt.name,\r\n        quantity: quantity,\r\n        sumWeapon: 0,\r\n        sumAbilities: 0,\r\n        sum: unitsData[position].stats.points * quantity,\r\n      }\r\n      dispatch(setSolderUnit({unit, unitId}));\r\n    }\r\n    }, [dataAtt, quantity, position]\r\n  )\r\n\r\n  if (!unitsData[position]) {\r\n    if (position !== 0) {\r\n      setPosition(0);\r\n    }\r\n    return <></>\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"att__root\">\r\n        <div className=\"att__headCell\">Experience</div>\r\n        <div className=\"att__headCell\">Movement</div>\r\n        <div className=\"att__headCell\">Attack</div>\r\n        <div className=\"att__headCell\">Defence</div>\r\n        <div className=\"att__headCell\">Morale</div>\r\n        <div className=\"att__headCell\">Actions</div>\r\n        <div className=\"att__headCell\">Points</div>\r\n      </div>\r\n      <div className=\"att__root\">\r\n        <div className=\"att__cell\">\r\n          <select onChange={(e) => {setPosition(e.target.value)}} className=\"att__select\" name=\"\" id=\"\">\r\n            {unitsData.map((item, index) => (\r\n              <option key={index} value={index}>{item.experience}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[position].stats.movement}\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[position].stats.attack}+\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[position].stats.defence}+\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[position].stats.morale}+\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[position].stats.action}\r\n        </div>\r\n        <div className=\"att__cell\">\r\n          {unitsData[position].stats.points}\r\n        </div>\r\n      </div>\r\n      <Equipment data={unitsData[position].equipment}/>\r\n      <Abilities data={unitsData[position].abilities}/>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Attributes;\r\n","import React, {useState} from 'react';\r\nimport Attributes from \"../Attributes/indes\";\r\nimport soldersData from \"./solders.json\"\r\n\r\nimport \"./Solder.css\"\r\n\r\n\r\nconst Solder = ({unitId, remove}) => {\r\n  const solData = soldersData.solders;\r\n  const [quantity, setQuantity] = useState(3);\r\n  const [id, setId] = useState(0);\r\n\r\n  const checkSolder = (e) => {\r\n    setId(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <select onChange={checkSolder} name=\"\" id=\"\" className=\"\">\r\n          {solData.map((data) => (\r\n            <option key={data.id} value={data.id}>{data.name}</option>\r\n          ))}\r\n        </select>\r\n        <label htmlFor=\"\"></label>\r\n        <button onClick={() => {setQuantity(quantity - 1)}}>-</button>\r\n        {quantity}\r\n        <button onClick={() => {setQuantity(quantity + 1)}}>+</button>\r\n        <button onClick={remove}>remove</button>\r\n      </div>\r\n      <Attributes unitId={unitId} dataAtt={solData[id]} quantity={quantity}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Solder;\r\n","import React, { useState } from 'react';\r\nimport Solder from \"../../components/Solder\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setSolder, removeSolderId} from \"../../store/soldersArr\";\r\n\r\nconst Solders = () => {\r\n  const [solder, setSolders] = useState([])\r\n  const [counter, setCounter] = useState(0)\r\n\r\n  const startSolder = useSelector((state) => state.solders)\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const onRemove = (id) => {\r\n    setSolders(solder.filter((el) => el.id !== id));\r\n    dispatch(removeSolderId(id));\r\n  }\r\n\r\n  const addSolder = function () {\r\n    dispatch(setSolder({id: counter}))\r\n    setSolders([...solder, {id: counter}]);\r\n    setCounter(counter + 1);\r\n  }\r\n\r\n  return (\r\n    <div className=\"solder__root\">\r\n      <div className=\"commander__header\">Solders</div>\r\n      {solder.map(({id}, index) => (\r\n        <Solder\r\n          key={id} unitId={id} remove={() => onRemove(id)}\r\n        />\r\n      ))}\r\n      <button className=\"soldersButton\" onClick={addSolder}>add solders group </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Solders;\r\n","import React from 'react';\r\nimport Attributes from \"../Attributes/indes\";\r\n\r\nimport './Commander.css'\r\n\r\nconst Commander = () => {\r\n\r\n  return (\r\n    <div className=\"commander__root\">\r\n      <div className=\"commander__header\">\r\n        commander\r\n      </div>\r\n      <div className=\"commander__wrap\">\r\n        <label htmlFor=\"comm_select\">Choose your commander: </label>\r\n        <select name=\"\" id=\"comm_select\" className=\"commander__choose\">\r\n          <option value=\"baron\">Baron</option>\r\n          <option onClick={() => {console.log(\"click on option\")}} value=\"baron-m\">Mounted baron</option>\r\n          <option value=\"lord\">Lord</option>\r\n          <option value=\"lord-m\">Mounted Lord</option>\r\n          <option value=\"vsergeant\">Veteran Sergeant</option>\r\n          <option value=\"vsergant-m\">Mounted Veteran Sergeant</option>\r\n        </select>\r\n      </div>\r\n      <button> add command group?</button>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Commander;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const pointSlice = createSlice({\r\n  name: 'point',\r\n  initialState: {\r\n    startPoint: 500,\r\n    currentPoint: 0\r\n  },\r\n  reducers: {\r\n    setStartPoints: (state, action) => {\r\n      state.startPoint = Number(action.payload);\r\n    },\r\n    setCurPoints: (state, action) => {\r\n      state.currentPoint = Number(action.payload);\r\n    }\r\n  }\r\n})\r\n\r\n\r\nexport const { setStartPoints, setCurPoints } = pointSlice.actions\r\n\r\nexport default pointSlice.reducer\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setStartPoints} from \"../../store/pointSlice\";\r\n\r\n\r\nconst Settings = () => {\r\n  const currentPoints = useSelector((state) => state.point.currentPoint);\r\n  const startPoint = useSelector((state) => state.point.startPoint)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <div className=\"commander__root\">\r\n      <div className=\"commander__header\">Retinue settings</div>\r\n      <div className=\"retinueSett\">\r\n        <div>\r\n          <label htmlFor=\"ret_name\">Retinue name: </label>\r\n          <input id=\"ret_name\" type=\"text\" placeholder=\"Get name for you Retinue\"/>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"ret_points\">Points: </label>\r\n          <input type=\"number\" onChange={(e) =>{\r\n            dispatch(setStartPoints(e.target.value))\r\n          }} value={startPoint}/>\r\n        </div>\r\n\r\n        Points remain: {currentPoints}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React, {useEffect} from 'react'\nimport './App.css';\nimport Solders from \"./layouts/Solders/Solders\";\nimport Commander from \"./components/Commander\";\nimport Settings from \"./components/Settings\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setCurPoints} from \"./store/pointSlice\";\n\nfunction App() {\n  /*\n  const company = {\n    settings: {\n      name: '',\n      startPoints: 0,\n    },\n    commanders: [\n      {\n        name:\"\",\n        level: \"\",\n        stats: {\n          movement: 6,\n          attack: 4,\n          defence: 7,\n          morale: 4,\n          action: 1,\n          points: 19\n        },\n        equipment: {\n          weapon: {\n            name: \"crossbow\",\n            attModifier: [0, 1]\n          },\n          armour: {\n            name: \"mail\",\n            defModifier: 2\n          },\n          shield: {\n\n          },\n          options: [{\n            name: \"lance\",\n            isChecked: true\n          }]\n        },\n        abilities: [\"Every Bloody Sunday\"],\n        comgroup: {\n          name:\"\",\n          level: \"\",\n          stats: {\n            movement: 6,\n            attack: 4,\n            defence: 7,\n            morale: 4,\n            action: 1,\n            points: 19\n          },\n          equipment: {\n            weapon: {\n              name: \"crossbow\",\n              attModifier: [0, 1]\n            },\n            armour: {\n              name: \"mail\",\n              defModifier: 2\n            },\n            shield: {\n\n            },\n            options: [{\n              name: \"lance\",\n              isChecked: true\n            }]\n          },\n          abilities: [\"Every Bloody Sunday\"],\n        }\n      }\n    ],\n    solders: [\n      {\n        unit: {\n          name: \"sergeants\",\n          level: \"veteran\",\n          stats: {\n            movement: 6,\n            attack: 4,\n            defence: 7,\n            morale: 4,\n            action: 1,\n            points: 19\n          },\n          equipment: {\n            weapon: {\n              name: \"crossbow\",\n              attModifier: [0, 1]\n            },\n            armour: {\n              name: \"mail\",\n              defModifier: 2\n            },\n            shield: {\n\n            },\n            options: [{\n              name: \"lance\",\n              isChecked: true\n            }]\n          },\n          abilities: [\"Every Bloody Sunday\"]\n        }\n      }\n    ]\n  }\n  */\n\n  const getStartPoints = useSelector((state) => state.point.startPoint);\n  const getSolders = useSelector(state => state.solders)\n  const dispatch = useDispatch();\n\n  const calcPoints = () => {\n    const sum = getSolders.reduce((acc, item) => {\n      if (item.unit) {\n        acc += item.unit.sum;\n      }\n\n      return acc\n    }, 0);\n    dispatch(setCurPoints(getStartPoints - sum))\n  }\n\n  useEffect(calcPoints, [getSolders, getStartPoints])\n\n  return (\n    <div className=\"App\">\n      <div className=\"App_wrap\">\n        <h1 className=\"Header\">Army roster</h1>\n\n        <Settings />\n        <Commander />\n        <button>add another commander?</button>\n        <div className=\"solders-wrap\">\n          <Solders />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport pointSlice from \"./pointSlice\";\r\nimport soldersSlice from \"./soldersArr\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    point: pointSlice,\r\n    solders: soldersSlice\r\n  },\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport store from \"./store/store\";\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}